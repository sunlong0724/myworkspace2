#ifndef __DECK_LINK_DEVICE_H__
#define __DECK_LINK_DEVICE_H__

/* -LICENSE-START-
** Copyright (c) 2014 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
**
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#define MAX_DEVICES_COUNT 8

namespace decklink_interface {

	typedef int(*SourceDataCallback)(char*, int, void*);


	class CDeckLinkOutputDevice {

	public:
		CDeckLinkOutputDevice();

		BOOL CreateObjects(int k);
		void DestroyObjects();
		void setSourceCallback(SourceDataCallback cb, void* ctx);
		//void setVideoInputFormatChangedCallback(PixelFormatChangedCallback cb, void* ctx);

		BOOL start();
		BOOL stop();

		void  convertFrameCountToTimecode(/*INT32_UNSIGNED*/unsigned int frameCount, /*INT8_UNSIGNED*/unsigned char* hours, /*INT8_UNSIGNED*/unsigned char* minutes, /*INT8_UNSIGNED*/unsigned char* seconds, /*INT8_UNSIGNED*/unsigned char* frames);
		long  setRP188VitcTimecodeOnFrame(/*IDeckLinkMutableVideoFrame*/void* videoFrame, /*INT8_UNSIGNED*/unsigned char hours, /*INT8_UNSIGNED*/unsigned char minutes, /*INT8_UNSIGNED*/unsigned char seconds, /*INT8_UNSIGNED*/unsigned char frames);
	private:
		void* CreateFrame(void* deckLinkOutput);
		void  FillBlue(void* theFrame);

	private:
		static int		counter;

		//IDeckLinkIterator*      deckLinkIterator = NULL;
		//IDeckLink*              deckLink = NULL;
		//IDeckLinkOutput*        deckLinkOutput = NULL;
		//OutputCallback*         outputCallback = NULL;
		//IDeckLinkVideoFrame*    videoFrameBlue = NULL;
		//IDeckLinkDisplayMode*   gDisplayMode = NULL;
	public:
		static void*	deckLinkIterator;
		void*			deckLinkAttributes;
		void*			deckLink;
		void*           deckLinkOutput;
		void*			outputCallback;
		void*			deckLinkDisplayMode;//IDeckLinkDisplayMode*
		void*			videoFrameBlue; //IDeckLinkVideoFrame*

		SourceDataCallback m_cb;
		void*			   m_cb_ctx;

	
		
		long long            frameDuration;//BMDTimeValue
		long long            timeScale;//BMDTimeScale
	};

	int CDeckLinkOutputDevice::counter = 0;
	void* CDeckLinkOutputDevice::deckLinkIterator = NULL;

}
#endif // !__DECK_LINK_DEVICE_H__

